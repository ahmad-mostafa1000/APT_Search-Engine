from html.parser import HTMLParser  
from urllib.request import urlopen  
from urllib import parse

# We are going to create a class called LinkParser that inherits some
# methods from HTMLParser which is why it is passed into the definition
class LinkParser(HTMLParser):
    # This is a function that HTMLParser normally has
    # but we are adding some functionality to it
    def handle_starttag(self, tag, attrs):
        # We are looking for the begining of a link. Links normally look
        # like <a href="www.someurl.com"></a>
        if tag == 'a':
            for (key, value) in attrs:
                if key == 'href':
                    # We are grabbing the new URL. We are a lso adding the
                    # base URL to it. For example:
                    # www.netinstructions.com is the base and
                    # somepage.html is the new URL (a relative URL)
                    #
                    # We combine a relative URL with the base URL to create
                    # an absolute URL like:
                    # www.netinstructions.com/somepage.html
                    newUrl = parse.urljoin(self.baseUrl, value)
                    # And add it to our colection of links:
                    self.links = self.links + [newUrl]

    # This is a new function that we are creating to get links
    # that our spider() function will call
    def getLinks(self, url):
        self.links = []
        # Remember the base URL which will be important when creating
        # absolute URLs
        self.baseUrl = url
        # Use the urlopen function from the standard Python 3 library
        # Make sure that we are looking at HTML and not other things that
        # are floating around on the internet (such as
        # JavaScript files, CSS, or .PDFs for example)
        try:
            response = urlopen(url)
            if response.getheader('Content-Type')=='text/html; charset=UTF-8':
                htmlBytes = response.read()
                # Note that feed() handles Strings well, but not bytes
                # (A change from Python 2.x to Python 3.x)
                htmlString = htmlBytes.decode("utf-8")
                self.feed(htmlString)
                return htmlString, self.links
            else:
                return "",[]
        except URLError:
          return "",[]

def spider(url, maxPages):  
    pagesToVisit = [url]
    VisitedLinks=[]
    myfile = open("links.txt","r+")
    numberVisited = 0
    # The main loop. Create a LinkParser and get all the links on the page.
    # Also search the page for the word or string
    # In our getLinks function we return the web page
    # (this is useful for searching for the word)
    # and we return a set of links from that web page
    # (this is useful for where to go next)9
    while numberVisited < maxPages and pagesToVisit != []:
        numberVisited = numberVisited+1
        # Start from the beginning of our collection of pages to visit
        url = pagesToVisit[0]
        print("url: "+url)
        pagesToVisit.remove(url)
        if url not in VisitedLinks :
            VisitedLinks.append(url);
            parser = LinkParser()
            data, links = parser.getLinks(url)
            pagesToVisit = links
            number = 1
            for i in links:
                 myfile.write(str(number) +": "+ i +"\n")
                 number = number + 1        
          

url = "https://www.crummy.com/software/BeautifulSoup/bs4/doc/"; 
spider(url,100)
